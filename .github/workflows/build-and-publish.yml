name: Build and Publish

on:
  push:
    branches:
      - master
      - dev

    tags:
      - '*'

jobs:

  build:

    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Metadata
        run: echo "IS_RELEASE=${{ startsWith(github.ref, 'refs/tags/') }}" >> $GITHUB_ENV
          
      - name: Environment
        run: |
          echo "VERSION=$(python build/print_version.py ${{ github.run_number }} ${{ env.IS_RELEASE }} false)" >> $GITHUB_ENV
          echo "$(python build/print_solution.py)" >> $GITHUB_ENV

      - name: Extract annotation tag
        if: ${{ env.IS_RELEASE == 'true' }}
        run: python build/create_tag_body.py

      - name: Set up dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Set up Python 
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install
        run: |
          npm install -g pyright
          python -m pip install httpx pytest pytest-asyncio

      - name: Build
        run: dotnet build -c Release src/Apollo3zehn.OpenApiClientGenerator/Apollo3zehn.OpenApiClientGenerator.csproj

      - name: Test
        run: |
          dotnet test -c Release /p:BuildProjectReferences=false
          pyright
          pytest

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            artifacts/packages/
            artifacts/tag_body.txt

    outputs:
      is_release: ${{ env.IS_RELEASE }}
      version: ${{ env.VERSION }}

  publish_dev:

    needs: build
    name: Publish (dev)
    runs-on: ubuntu-latest

    if: ${{ needs.build.outputs.is_release != 'true' }}

    steps:

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts

      - name: Nuget package (MyGet)
        run: dotnet nuget push 'artifacts/packages/*.nupkg' --api-key ${MYGET_API_KEY} --source https://www.myget.org/F/apollo3zehn-dev/api/v3/index.json
        env:
          MYGET_API_KEY: ${{ secrets.MYGET_API_KEY }}

  publish_release:

    needs: build
    name: Publish (release)
    runs-on: ubuntu-latest

    if: ${{ needs.build.outputs.is_release == 'true' }}

    steps:

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts

      - name: GitHub Release Artifacts
        uses: softprops/action-gh-release@v1
        with:
          body_path: artifacts/tag_body.txt

      - name: Nuget package (Nuget)
        run: dotnet nuget push 'artifacts/packages/*.nupkg' --api-key ${NUGET_API_KEY} --source https://api.nuget.org/v3/index.json
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}